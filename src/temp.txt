
commander.command('init [target]')
         .allowUnknownOption(false)
         .description(`create or update "${tempDirName}" in current working dir (or in target).`)
         .action(call_command);

commander.command('build [args...]')
         .allowUnknownOption(true)
         .description('build image in current working dir')
         .action(call_command);

commander.command('deploy <git-url> [save-path]')
         .allowUnknownOption(false)
         .option('-s', 'auto start after build', 'yes')
         .description('download service files from [git-url].\n\t\tsave to /data/services or /opt/services or [save-path]\n\t\tthen build it.')
         .action(call_command);

commander.command('install')
         .allowUnknownOption(false)
         .description('install built image as system service, auto start on boot.')
         .action(call_command);

commander.command('uninstall')
         .allowUnknownOption(false)
         .description('stop and uninstall service.')
         .action(call_command);

commander.command('start')
         .allowUnknownOption(false)
         .description('start service.')
         .action(call_command);

commander.command('stop')
         .allowUnknownOption(false)
         .description('stop service.')
         .action(call_command);

commander.command('restart')
         .allowUnknownOption(false)
         .description('restart service.')
         .action(call_command);

commander.command('reload')
         .allowUnknownOption(false)
         .description('run reload command (if have).')
         .action(call_command);

commander.command('status')
         .allowUnknownOption(false)
         .description('check service status.')
         .action(call_command);

commander.command('enable')
         .allowUnknownOption(false)
         .description('start service on system bootup.')
         .action(call_command);

commander.command('disable')
         .allowUnknownOption(false)
         .description('don\'t auto start service on system bootup.')
         .action(call_command);

commander.command('debug [args...]')
         .allowUnknownOption(true)
         .description('run script on host machine. arguments will pass to starup command.')
         .action(call_command);

commander.command('foreground')
         .allowUnknownOption(true)
         .description('start docker container in foreground (for debugging).')
         .action(call_command);

commander.command('run')
         .allowUnknownOption(false)
         .description('start docker container in docker daemon, not controlled by system.')
         .action(call_command);

commander.command('script <cmdline> [arguments...]')
         .allowUnknownOption(true)
         .description('run command in already running container.')
         .action(call_command);

commander.command('mkconfig [args...]')
         .allowUnknownOption(false)
         .description('create build script for debug.')
         .action(call_command);

commander.command('update')
         .allowUnknownOption(false)
         .description('update current folder status.')
         .action(call_command);

commander.command('clean')
         .allowUnknownOption(false)
         .description('remove temp files.')
         .action(call_command);

commander.command('stop-command')
         .allowUnknownOption(false)
         .description('internal command, run stop command.')
         .action(call_command);

commander.action(function (command) {
	commander.unknownOption(command);
});

commander.parse(process.argv);

commander.outputHelp();
process.exit(1);
